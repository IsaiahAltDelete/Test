<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bouncing Ball with Trailing Smaller Balls</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        #canvas {
            border: 1px solid #000;
        }
    </style>
</head>
<body>
    <canvas id="canvas" width="400" height="400"></canvas>
    <script>
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');

        const centerX = canvas.width / 2;
        const centerY = canvas.height / 2;
        const radius = 190;

        let x = centerX;
        let y = centerY;
        let dx = (Math.random() - 0.5) * 4;
        let dy = (Math.random() - 0.5) * 4;

        const ballRadius = 15;
        let strokeColor = getRandomColor();
        let ballColor = 'black';
        let trail = [];

        function getRandomColor() {
            return `hsl(${Math.random() * 360}, 100%, 50%)`;
        }

        function getComplementaryColor(color) {
            const hsl = color.match(/\d+/g);
            return `hsl(${(parseInt(hsl[0]) + 180) % 360}, ${hsl[1]}%, ${hsl[2]}%)`;
        }

        function drawCircle() {
            ctx.beginPath();
            ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);
            ctx.strokeStyle = strokeColor;
            ctx.lineWidth = 5;
            ctx.stroke();
        }

        function drawBall() {
            ctx.beginPath();
            ctx.arc(x, y, ballRadius, 0, Math.PI * 2);
            ctx.fillStyle = ballColor;
            ctx.fill();
        }

        function drawTrail() {
            trail.forEach((ball, index) => {
                ctx.beginPath();
                ctx.arc(ball.x, ball.y, ballRadius * (1 - index / trail.length), 0, Math.PI * 2);
                ctx.fillStyle = `hsla(${(index / trail.length) * 360}, 100%, 50%, ${1 - index / trail.length})`;
                ctx.fill();
            });
        }

        function update() {
            ctx.fillStyle = 'rgba(240, 240, 240, 0.3)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            drawCircle();
            drawTrail();

            const dx2 = centerX - x;
            const dy2 = centerY - y;
            const distance = Math.sqrt(dx2 * dx2 + dy2 * dy2);

            if (distance > radius - ballRadius) {
                const angle = Math.atan2(dy2, dx2);
                const newX = centerX - (radius - ballRadius) * Math.cos(angle);
                const newY = centerY - (radius - ballRadius) * Math.sin(angle);

                dx = (Math.random() - 0.5) * 4;
                dy = (Math.random() - 0.5) * 4;

                x = newX;
                y = newY;

                strokeColor = getRandomColor();
                ballColor = getComplementaryColor(strokeColor);
            }

            x += dx;
            y += dy;

            trail.unshift({x, y});
            if (trail.length > 20) trail.pop();

            drawBall();

            requestAnimationFrame(update);
        }

        update();
    </script>
</body>
</html>
