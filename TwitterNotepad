<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NOTEPAD</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 16 16%22><text y=%2214%22 font-size=%2216%22>üê§</text></svg>">
    <style>
        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateY(0);
            }
            40% {
                transform: translateY(-20px);
            }
            60% {
                transform: translateY(-10px);
            }
        }
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(100px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        @keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: scale(0.8);
            }
            to {
                opacity: 1;
                transform: scale(1);
            }
        }
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #15202b;
            color: white;
            display: flex;
            flex-direction: column;
            height: 100vh;
            overflow: hidden;
        }
        .container {
            display: flex;
            flex: 1;
            overflow: hidden;
        }
        .sidebar, .tag-sidebar {
            flex: 0 0 20%;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            background-color: #1f2937;
            padding: 1rem;
            height: 100%;
            box-sizing: border-box;
        }
        .tag-sidebar {
            background-color: #192734;
        }
        .sidebar h1, .tag-sidebar h2 {
            font-size: 1.875rem;
            font-weight: bold;
            margin-bottom: 1.5rem;
            text-align: center;
        }
        .sidebar h1 span {
            display: inline-block;
            animation: bounce 1.5s infinite;
        }
        .sidebar h1 span:nth-child(2) { animation-delay: 0.1s; }
        .sidebar h1 span:nth-child(3) { animation-delay: 0.2s; }
        .sidebar h1 span:nth-child(4) { animation-delay: 0.3s; }
        .sidebar h1 span:nth-child(5) { animation-delay: 0.4s; }
        .sidebar h1 span:nth-child(6) { animation-delay: 0.5s; }
        .main {
            flex: 1;
            overflow-y: auto;
            padding: 1rem;
            scrollbar-width: thin;
            scrollbar-color: #1da1f2 #192734;
        }
        .main::-webkit-scrollbar {
            width: 12px;
        }
        .main::-webkit-scrollbar-track {
            background: #192734;
        }
        .main::-webkit-scrollbar-thumb {
            background-color: #1da1f2;
            border-radius: 20px;
            border: 3px solid #192734;
        }
        input, textarea {
            width: 100%;
            padding: 0.75rem;
            margin-bottom: 1rem;
            border-radius: 10px;
            border: 1px solid #38444d;
            background-color: #192734;
            color: white;
            transition: background-color 0.3s, border-color 0.3s;
        }
        input:focus, textarea:focus {
            background-color: #253341;
            border-color: #1da1f2;
        }
        button {
            background-color: #1da1f2;
            color: white;
            font-weight: bold;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 30px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        button:hover {
            background-color: #0d8bcb;
        }
        .note {
            background-color: #253341;
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 10px;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
            color: white;
            animation: slideIn 0.3s ease-out;
            transition: transform 0.3s, box-shadow 0.3s;
        }
        .note:hover {
            transform: translateY(-5px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        .tag {
            display: inline-block;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
            padding: 0.25rem 0.75rem;
            background-color: #38444d;
            color: #8899a6;
            border-radius: 30px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .tag:hover, .tag.selected {
            background-color: #1da1f2;
            color: white;
        }
        .note-actions {
            display: flex;
            justify-content: space-between;
            margin-top: 0.5rem;
        }
        .note-actions button {
            background-color: transparent;
            color: #8899a6;
            padding: 0.25rem;
            transition: color 0.3s, filter 0.3s;
        }
        .note-actions button:hover {
            color: #1da1f2;
            filter: brightness(1.2);
        }
        .note-actions button.favorited {
            color: gold;
            filter: brightness(1.2);
        }
        #notification {
            position: fixed;
            top: 1rem;
            right: 1rem;
            background-color: #1da1f2;
            border-left: 4px solid #0d8bcb;
            color: white;
            padding: 1rem;
            display: none;
            border-radius: 10px;
            cursor: pointer;
        }
        .footer {
            display: flex;
            justify-content: space-between;
            padding: 1rem;
            background-color: #1f2937;
            color: white;
            padding-bottom: 1.5rem; /* added padding to prevent cutting off */
        }
        .footer button {
            background-color: #1da1f2;
            color: white;
            font-weight: bold;
            padding: 0.5rem 1rem;
            border: none;
            border-radius: 30px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .footer button:hover {
            background-color: #0d8bcb;
        }
        .search-container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 1rem;
        }
        .search-container input {
            width: 80%;
            padding: 0.5rem;
            border-radius: 30px;
            border: 1px solid #38444d;
            background-color: #192734;
            color: white;
        }
        #newNoteButton {
            width: 100%;
            padding: 1rem;
            margin-bottom: 1rem;
        }
        #showFavorites, #settingsButton {
            background-color: #1f2937;
            color: white;
            border: 1px solid #38444d;
            padding: 0.5rem 1rem;
            border-radius: 30px;
            cursor: pointer;
            transition: background-color 0.2s, border-color 0.2s;
            margin-bottom: 1rem;
        }
        #showFavorites:hover, #settingsButton:hover {
            background-color: #253341;
            border-color: #1da1f2;
        }
        #allTags, #trendingTags {
            display: flex;
            flex-direction: column;
            gap: 0.5rem;
        }
        #trendingTags .tag {
            display: flex;
            align-items: center;
        }
        .tag-number {
            font-weight: bold;
            margin-right: 0.5rem;
        }
        .modal {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #253341;
            padding: 2rem;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
            z-index: 1000;
            animation: modalFadeIn 0.3s ease-out;
            width: 90%;
            max-width: 600px;
        }
        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
        }
        .modal-header h2 {
            margin: 0;
            font-size: 1.2rem;
        }
        .modal-close {
            background: none;
            border: none;
            color: #8899a6;
            font-size: 1.5rem;
            cursor: pointer;
        }
        .modal-close:hover {
            color: #1da1f2;
        }
        .modal-backdrop {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
        }
        .show {
            display: block;
        }
        .tag-suggestions {
            display: flex;
            gap: 0.5rem;
            margin-bottom: 1rem;
        }
        .tag-suggestion {
            padding: 0.25rem 0.75rem;
            background-color: #38444d;
            color: #8899a6;
            border-radius: 20px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .tag-suggestion:hover {
            background-color: #1da1f2;
            color: white;
        }
        .bottom-section {
            margin-top: auto;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="sidebar">
            <div>
                <h1><span>N</span><span>O</span><span>T</span><span>E</span><span>P</span><span>A</span><span>D</span></h1>
                <div class="search-container">
                    <input type="text" id="search" placeholder="Search notes...">
                </div>
                <button id="newNoteButton" onclick="openNewNoteModal()">New Note</button>
            </div>
            <div class="bottom-section">
                <button id="showFavorites" onclick="toggleFavorites()">Show Favorites</button>
                <h3>Trending Tags</h3>
                <div id="trendingTags"></div>
                <div style="height: 1rem;"></div> <!-- Added space between trending tags and settings -->
                <button id="settingsButton" onclick="toggleSettings()">Settings</button>
            </div>
        </div>
        <div class="main" id="notesList"></div>
        <div class="tag-sidebar">
            <h2>Tags</h2>
            <div id="allTags"></div>
            <button onclick="toggleTheme()" class="bottom-section">Light/Dark Mode</button>
        </div>
    </div>
    <div id="notification" onclick="openNotification()"></div>

    <div class="modal-backdrop" id="modalBackdrop"></div>
    <div class="modal" id="newNoteModal">
        <div class="modal-header">
            <h2>New Note</h2>
            <button class="modal-close" onclick="closeNewNoteModal()">&times;</button>
        </div>
        <textarea id="newNoteContent" placeholder="What's on your mind?" rows="3"></textarea>
        <div class="tag-suggestions">
            <span class="tag-suggestion" onclick="addTag('#idea')">#idea</span>
            <span class="tag-suggestion" onclick="addTag('#project')">#project</span>
            <span class="tag-suggestion" onclick="addTag('#task')">#task</span>
            <span class="tag-suggestion" onclick="addTag('#note')">#note</span>
        </div>
        <input type="text" id="newNoteTags" placeholder="Add tags (e.g., #idea #project)" style="width: 80%; margin: 0 auto; display: block;">
        <div style="display: flex; justify-content: center; margin-top: 1rem;">
            <button onclick="addNote()">Post Note</button>
        </div>
    </div>

    <script>
        let notes = JSON.parse(localStorage.getItem('notes')) || [
            { id: 1, content: 'New video idea: React tutorials', tags: ['#content', '#react'], favorite: false, createdAt: new Date(Date.now() - 86400000).toISOString() },
            { id: 2, content: 'Schedule team meeting for next week', tags: ['#management', '#planning'], favorite: false, createdAt: new Date(Date.now() - 3600000).toISOString() },
            { id: 3, content: 'Brainstorm session: AI-powered note-taking app', tags: ['#ideas', '#ai'], favorite: true, createdAt: new Date(Date.now() - 300000).toISOString() },
            { id: 4, content: 'Outline for upcoming blog post on React hooks', tags: ['#content', '#react'], favorite: false, createdAt: new Date().toISOString() },
        ];
        let selectedTag = null;
        let showFavorites = false;

        function saveNotes() {
            localStorage.setItem('notes', JSON.stringify(notes));
        }

        function renderNotes() {
            const notesList = document.getElementById('notesList');
            notesList.innerHTML = '';
            const searchTerm = document.getElementById('search').value.toLowerCase();
            
            const filteredNotes = notes
                .filter(note => showFavorites ? note.favorite : true)
                .filter(note => selectedTag ? note.tags.includes(selectedTag) : true)
                .filter(note => note.content.toLowerCase().includes(searchTerm) || 
                                note.tags.some(tag => tag.toLowerCase().includes(searchTerm)));

            filteredNotes.forEach(note => {
                const noteElement = document.createElement('div');
                noteElement.className = 'note';
                noteElement.innerHTML = `
                    <p>${note.content}</p>
                    <div>${note.tags.map(tag => `<span class="tag" onclick="selectTag('${tag}')">${tag}</span>`).join('')}</div>
                    <div>${formatRelativeTime(note.createdAt)}</div>
                    <div class="note-actions">
                        <button onclick="boostNote(${note.id})">‚¨ÜÔ∏è</button>
                        <button class="favorite-button ${note.favorite ? 'favorited' : ''}" onclick="toggleFavorite(${note.id})">‚≠ê</button>
                        <button onclick="editNote(${note.id})">‚úèÔ∏è</button>
                        <button onclick="deleteNote(${note.id})">üóëÔ∏è</button>
                    </div>
                `;
                notesList.appendChild(noteElement);
            });

            renderTags();
            renderTrendingTags();
        }

        function renderTags() {
            const allTags = [...new Set(notes.flatMap(note => note.tags))];
            const tagsContainer = document.getElementById('allTags');
            tagsContainer.innerHTML = allTags.map(tag => 
                `<span class="tag ${tag === selectedTag ? 'selected' : ''}" onclick="selectTag('${tag}')">${tag}</span>`
            ).join('');
        }

        function renderTrendingTags() {
            const tags = notes.flatMap(note => note.tags);
            const tagCounts = tags.reduce((acc, tag) => {
                acc[tag] = (acc[tag] || 0) + 1;
                return acc;
            }, {});
            const sortedTags = Object.entries(tagCounts)
                .sort((a, b) => b[1] - a[1])
                .slice(0, 10)
                .map(([tag], index) => ({ tag, index: index + 1 }));
            
            const trendingTagsContainer = document.getElementById('trendingTags');
            trendingTagsContainer.innerHTML = sortedTags.map(({ tag, index }) => 
                `<div class="tag" onclick="selectTag('${tag}')">
                    <span class="tag-number">${index}</span>${tag}
                </div>`
            ).join('');
        }

        function openNewNoteModal() {
            document.getElementById('newNoteModal').classList.add('show');
            document.getElementById('modalBackdrop').classList.add('show');
        }

        function closeNewNoteModal() {
            document.getElementById('newNoteModal').classList.remove('show');
            document.getElementById('modalBackdrop').classList.remove('show');
        }

        function addTag(tag) {
            const tagInput = document.getElementById('newNoteTags');
            if (!tagInput.value.includes(tag)) {
                tagInput.value += tag + ' ';
            }
        }

        function addNote() {
            const content = document.getElementById('newNoteContent').value;
            const tags = document.getElementById('newNoteTags').value.split(' ').filter(tag => tag.startsWith('#'));
            if (content.trim() !== '') {
                const newNote = {
                    id: Date.now(),
                    content: content,
                    tags: tags,
                    favorite: false,
                    createdAt: new Date().toISOString()
                };
                notes.unshift(newNote);
                saveNotes();
                document.getElementById('newNoteContent').value = '';
                document.getElementById('newNoteTags').value = '';
                closeNewNoteModal();
                renderNotes();
            }
        }

        function deleteNote(id) {
            notes = notes.filter(note => note.id !== id);
            saveNotes();
            renderNotes();
        }

        function toggleFavorite(id) {
            notes = notes.map(note => 
                note.id === id ? { ...note, favorite: !note.favorite } : note
            );
            saveNotes();
            renderNotes();
        }

        function editNote(id) {
            const note = notes.find(note => note.id === id);
            document.getElementById('newNoteContent').value = note.content;
            document.getElementById('newNoteTags').value = note.tags.join(' ');
            openNewNoteModal();
            // Remove the old note and add the updated one when submitted
            notes = notes.filter(n => n.id !== id);
            renderNotes();
        }

        function boostNote(id) {
            const note = notes.find(note => note.id === id);
            notes = [{ ...note, createdAt: new Date().toISOString() }, ...notes.filter(n => n.id !== id)];
            saveNotes();
            renderNotes();
        }

        function selectTag(tag) {
            selectedTag = selectedTag === tag ? null : tag;
            renderNotes();
        }

        function toggleFavorites() {
            showFavorites = !showFavorites;
            document.getElementById('showFavorites').textContent = showFavorites ? 'Show All' : 'Show Favorites';
            renderNotes();
        }

        function formatRelativeTime(dateString) {
            const date = new Date(dateString);
            const now = new Date();
            const diffInSeconds = Math.floor((now - date) / 1000);
            
            if (diffInSeconds < 60) return 'just now';
            if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`;
            if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`;
            return `${Math.floor(diffInSeconds / 86400)} days ago`;
        }

        function showNotification(message) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.style.display = 'block';
            setTimeout(() => {
                notification.style.display = 'none';
            }, 5000);
        }

        function openNotification() {
            const search = document.getElementById('search');
            search.value = notification.textContent.replace('Remember: ', '').slice(0, -3);
            renderNotes();
        }

        function toggleSettings() {
            alert('Settings clicked!');
        }

        function toggleTheme() {
            const isDarkMode = document.body.style.backgroundColor === '#15202b';
            document.body.style.backgroundColor = isDarkMode ? '#f3f4f6' : '#15202b';
            document.body.style.color = isDarkMode ? 'black' : 'white';
            document.querySelectorAll('.note, .tag, input, textarea, .modal, .sidebar, .tag-sidebar, .footer').forEach(el => {
                el.style.backgroundColor = isDarkMode ? '#ffffff' : el.classList.contains('sidebar') || el.classList.contains('tag-sidebar') || el.classList.contains('footer') ? '#1f2937' : '#253341';
                el.style.color = isDarkMode ? 'black' : 'white';
                el.style.borderColor = isDarkMode ? '#e2e8f0' : '#38444d';
            });
            document.querySelectorAll('.modal-close, .note-actions button, .tag-suggestion, #showFavorites, #settingsButton').forEach(el => {
                el.style.color = isDarkMode ? '#4a5568' : '#8899a6';
            });
        }

        document.getElementById('search').addEventListener('input', renderNotes);
        document.addEventListener('keydown', function(event) {
            if (event.key === 'Escape') {
                closeNewNoteModal();
            }
        });

        setInterval(() => {
            if (notes.length > 0) {
                const randomNote = notes[Math.floor(Math.random() * notes.length)];
                showNotification(`Remember: ${randomNote.content.slice(0, 30)}...`);
            }
        }, 30000);

        renderNotes();
    </script>
</body>
</html>
